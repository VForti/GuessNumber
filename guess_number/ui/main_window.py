import tkinter as tk
from tkinter import messagebox
from core.game_logic import GuessNumberGame

class MainWindow:
    def __init__(self, root):
        self.root = root
        self.root.title("–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
        self.game = GuessNumberGame()
        self.build_ui()

    def build_ui(self):
        frame = tk.Frame(self.root, padx=15, pady=15)
        frame.pack()

        tk.Label(frame, text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ:").grid(row=0, column=0, sticky="e")
        self.min_entry = tk.Entry(frame, width=10)
        self.min_entry.grid(row=0, column=1)

        tk.Label(frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ:").grid(row=1, column=0, sticky="e")
        self.max_entry = tk.Entry(frame, width=10)
        self.max_entry.grid(row=1, column=1)

        self.start_button = tk.Button(frame, text="–ü–æ—á–∞—Ç–∏ –≥—Ä—É", command=self.start_game)
        self.start_button.grid(row=2, column=0, columnspan=2, pady=10)

        tk.Label(frame, text="–í–∞—à–∞ —Å–ø—Ä–æ–±–∞:").grid(row=3, column=0, sticky="e")
        self.guess_entry = tk.Entry(frame, width=10, state="disabled")
        self.guess_entry.grid(row=3, column=1)

        self.check_button = tk.Button(frame, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", state="disabled", command=self.check_guess)
        self.check_button.grid(row=4, column=0, columnspan=2, pady=5)

        self.feedback_label = tk.Label(frame, text="", fg="blue")
        self.feedback_label.grid(row=5, column=0, columnspan=2)

    def start_game(self):
        try:
            min_num = int(self.min_entry.get())
            max_num = int(self.max_entry.get())
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞.")
            return

        if min_num >= max_num:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ.")
            return

        self.game.start_game(min_num, max_num)
        self.feedback_label.config(text=f"–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å! –£ –≤–∞—Å {self.game.max_attempts} —Å–ø—Ä–æ–±.", fg="blue")
        self.guess_entry.config(state="normal")
        self.check_button.config(state="normal")
        self.min_entry.config(state="disabled")
        self.max_entry.config(state="disabled")
        self.start_button.config(state="disabled")
        self.guess_entry.delete(0, tk.END)

    def check_guess(self):
        if not self.game.is_game_active():
            # –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ
            self.feedback_label.config(
                text=f"–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –±—É–ª–æ {self.game.secret_number}.", fg="red"
            )
            return

        try:
            guess = int(self.guess_entry.get())
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
            return

        result = self.game.check_guess(guess)

        messages = {
            "correct": (f"üéâ –í—ñ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –±—É–ª–æ {self.game.secret_number}.", "green", True),
            "higher": (f"–°–ø—Ä–æ–±—É–π—Ç–µ –±—ñ–ª—å—à–µ —á–∏—Å–ª–æ! –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {self.game.attempts_left}", "orange", False),
            "lower": (f"–°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à–µ —á–∏—Å–ª–æ! –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {self.game.attempts_left}", "orange", False),
            "–°–ø—Ä–æ–± –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î": (f"–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –±—É–ª–æ {self.game.secret_number}.", "red", True)
        }

        msg, color, end_game_flag = messages.get(result, ("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞", "black", False))
        self.feedback_label.config(text=msg, fg=color)

        if end_game_flag:
            self.end_game()

        self.guess_entry.delete(0, tk.END)

    def end_game(self):
        self.guess_entry.config(state="disabled")
        self.check_button.config(state="disabled")
        self.start_button.config(state="normal")
        self.min_entry.config(state="normal")
        self.max_entry.config(state="normal")
